asyncapi: "2.0.0"
defaultContentType: "application/json"
info:
  title: "Streetlights API"
  version: "1.0.0"
  description: "The Smartylighting Streetlights API allows you to remotely manage\
    \ the city lights.\n\n    ### Check out its awesome features:\n\n    * Turn a\
    \ specific streetlight on/off \U0001f303\n    * Dim a specific streetlight \U0001f60e\
    \n    * Receive real-time information about environmental lighting conditions\
    \ \U0001f4c8"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
  production:
    url: "api.streetlights.smartylighting.com:{port}"
    protocol: "mqtt"
    description: "Test broker"
    variables:
      port:
        description: "Secure connection (TLS) is available through port 8883."
        enum:
        - "1883"
        - "8883"
        default: "1883"
    security:
    - apiKey: []
    - supportedOauthFlows:
      - "streetlights:on"
      - "streetlights:off"
      - "streetlights:dim"
    - openIdConnectWellKnown: []
channels:
  smartylighting/streetlights/1/0/action/{streetlightId}/dim:
    publish:
      operationId: "dimLight"
      traits:
      - $ref: "#/components/operationTraits/kafka"
      message:
        $ref: "#/components/messages/dimLight"
    parameters:
      streetlightId:
        $ref: "#/components/parameters/streetlightId"
  smartylighting/streetlights/1/0/event/{streetlightId}/lighting/measured:
    description: "The topic on which measured values may be produced and consumed."
    subscribe:
      operationId: "receiveLightMeasurement"
      summary: "Receive information about environmental lighting conditions of a particular\
        \ streetlight."
      traits:
      - $ref: "#/components/operationTraits/kafka"
      message:
        $ref: "#/components/messages/lightMeasured"
    parameters:
      streetlightId:
        $ref: "#/components/parameters/streetlightId"
  smartylighting/streetlights/1/0/action/{streetlightId}/turn/on:
    publish:
      operationId: "turnOn"
      traits:
      - $ref: "#/components/operationTraits/kafka"
      message:
        $ref: "#/components/messages/turnOnOff"
    parameters:
      streetlightId:
        $ref: "#/components/parameters/streetlightId"
components:
  schemas:
    dimLightPayload:
      type: "object"
      properties:
        sentAt:
          $ref: "#/components/schemas/sentAt"
        command:
          type: "integer"
          maximum: 100
          minimum: 0
    lightMeasuredPayload:
      type: "object"
      properties:
        lumens:
          type: "integer"
          minimum: 0
          description: "Light intensity measured in lumens."
        sentAt:
          $ref: "#/components/schemas/sentAt"
        command:
          type: "string"
          description: "Whether to turn on or off the light."
          enum:
          - "on"
          - "off"
    turnOnOffPayload:
      type: "object"
      properties:
        sentAt:
          $ref: "#/components/schemas/sentAt"
    sentAt:
      type: "string"
      format: "date-time"
      description: "Date and time when the message was sent."
  messages:
    turnOnOff:
      payload:
        $ref: "#/components/schemas/turnOnOffPayload"
      name: "turnOnOff"
      title: "Turn on/off"
      summary: "Command a particular streetlight to turn the lights on or off."
      traits:
      - $ref: "#/components/messageTraits/commonHeaders"
    dimLight:
      payload:
        $ref: "#/components/schemas/dimLightPayload"
      name: "dimLight"
      title: "Dim light"
      summary: "Command a particular streetlight to dim the lights."
      traits:
      - $ref: "#/components/messageTraits/commonHeaders"
    lightMeasured:
      payload:
        $ref: "#/components/schemas/lightMeasuredPayload"
      contentType: "application/json"
      name: "lightMeasured"
      title: "Light measured"
      summary: "Inform about environmental lighting conditions for a particular streetlight."
      traits:
      - $ref: "#/components/messageTraits/commonHeaders"
  securitySchemes:
    apiKey:
      type: "apiKey"
      description: "Provide your API key as the user and leave the password empty."
      in: "user"
    openIdConnectWellKnown:
      type: "openIdConnect"
      openIdConnectUrl: "https://authserver.example/.well-known"
    supportedOauthFlows:
      type: "oauth2"
      flows:
        implicit:
          scopes:
            streetlights:off: "Ability to switch lights off"
            streetlights:on: "Ability to switch lights on"
            streetlights:dim: "Ability to dim the lights"
          authorizationUrl: "https://authserver.example/auth"
        password:
          scopes:
            streetlights:off: "Ability to switch lights off"
            streetlights:on: "Ability to switch lights on"
            streetlights:dim: "Ability to dim the lights"
          tokenUrl: "https://authserver.example/token"
        clientCredentials:
          scopes:
            streetlights:off: "Ability to switch lights off"
            streetlights:on: "Ability to switch lights on"
            streetlights:dim: "Ability to dim the lights"
          tokenUrl: "https://authserver.example/token"
        authorizationCode:
          refreshUrl: "https://authserver.example/refresh"
          scopes:
            streetlights:off: "Ability to switch lights off"
            streetlights:on: "Ability to switch lights on"
            streetlights:dim: "Ability to dim the lights"
          authorizationUrl: "https://authserver.example/auth"
          tokenUrl: "https://authserver.example/token"
  parameters:
    streetlightId:
      description: "The ID of the streetlight."
      schema:
        type: "string"
  operationTraits:
    kafka:
      bindings:
        kafka:
          clientId: "my-app-id"
  messageTraits:
    commonHeaders:
      headers:
        type: "object"
        properties:
          my-app-header:
            type: "integer"
            maximum: 100
            minimum: 0